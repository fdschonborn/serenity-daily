name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 12 * * *" # Every day at 12:00

env:
  SERENITY_ROOT: ${{ github.workspace }}/serenity

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout Serenity
        uses: actions/checkout@v2
        with:
          repository: SerenityOS/serenity
          path: serenity

      - name: Update APT cache
        run: sudo apt update -y

      - name: Install script dependencies
        run: |
          sudo apt install -y curl python3-pip
          pip3 install --user requests

      - name: Set environment variables
        run: |
          echo "SERENITY_DAILY_DATE=$(date +%y%m%d)" >> $GITHUB_ENV
          echo "SERENITY_DAILY_DATE_PRETTY=$(date +%Y/%m/%d)" >> $GITHUB_ENV
          # Update the BUILD file every time we need a new build.
          echo "SERENITY_DAILY_BUILD=$(python3 ${{ github.workspace }}/scripts/get_build_number.py)" >> $GITHUB_ENV
          echo "SERENITY_DAILY_COMMIT_ID=$(git -C ${{ env.SERENITY_ROOT }} rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Install Serenity prerequisites
        run: sudo apt install -y build-essential cmake ninja-build libmpfr-dev libmpc-dev libgmp-dev e2fsprogs curl qemu-system-i386 qemu-utils

      - name: Set up GCC 10
        run: |
          sudo apt install -y gcc-10 g++-10
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 900 --slave /usr/bin/g++ g++ /usr/bin/g++-10

      - name: Check GCC version
        run: gcc --version

      - name: Cache Toolchain
        uses: actions/cache@v2
        with:
          path: ${{ env.SERENITY_ROOT }}/Toolchain/Cache/
          # Keep in sync with Serenity's workflow.
          key: ${{ runner.os }}-toolchain-i686-${{ hashFiles('serenity/Userland/Libraries/LibC/**/*.h', 'serenity/Toolchain/Patches/*.patch', 'serenity/Toolchain/BuildIt.sh') }}

      - name: Build Toolchain
        working-directory: ${{ env.SERENITY_ROOT }}/Toolchain/
        run: TRY_USE_LOCAL_TOOLCHAIN=y ./BuildIt.sh

      - name: Create the Build directory
        working-directory: ${{ env.SERENITY_ROOT }}
        run: mkdir -pv ${{ env.SERENITY_ROOT }}/Build/

      - name: Generate build files
        working-directory: ${{ env.SERENITY_ROOT }}/Build/
        run: cmake -v ${{ env.SERENITY_ROOT }}/ -G Ninja

      - name: Build Serenity
        working-directory: ${{ env.SERENITY_ROOT }}/Build/
        run: ninja -v -j$((nprocs + 1))

      - name: Install Serenity
        working-directory: ${{ env.SERENITY_ROOT }}/Build/
        run: ninja -v install

      - name: Build GRUB image
        working-directory: ${{ env.SERENITY_ROOT }}/Build/
        run: ninja -v grub-image

      - id: create_release
        name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.SERENITY_DAILY_DATE }}.${{ env.SERENITY_DAILY_BUILD }}-${{ env.SERENITY_DAILY_COMMIT_ID }}
          release_name: Serenity Daily (${{ env.SERENITY_DAILY_DATE_PRETTY }} Build ${{ env.SERENITY_DAILY_BUILD }}) (Commit ${{ env.SERENITY_DAILY_COMMIT_ID }})

      - name: Compress GRUB image
        run: zstd -z -19 -T0 ${{ env.SERENITY_ROOT }}/Build/grub_disk_image -o ${{ env.SERENITY_ROOT }}/Build/serenity-grub-${{ env.SERENITY_DAILY_DATE }}.${{ env.SERENITY_DAILY_BUILD }}-${{ env.SERENITY_DAILY_COMMIT_ID }}.img.zst

      - name: Update GRUB image to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.SERENITY_ROOT }}/Build/serenity-grub-${{ env.SERENITY_DAILY_DATE }}.${{ env.SERENITY_DAILY_BUILD }}-${{ env.SERENITY_DAILY_COMMIT_ID }}.img.zst
          asset_name: serenity-grub-${{ env.SERENITY_DAILY_DATE }}.${{ env.SERENITY_DAILY_BUILD }}-${{ env.SERENITY_DAILY_COMMIT_ID }}.img.zst
          asset_content_type: application/octet-stream
